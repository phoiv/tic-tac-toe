{"version":3,"sources":["Square.js","Board.js","Game.js","SetupScreen.js","index.js"],"names":["Square","style","animation","this","props","animate","color","className","value","onClick","onClickFun","React","Component","Board","i","winners","squares","includes","renderSquare","Game","state","stepNumber","history","Array","fill","move","onTree","xIsNext","orderAsc","pcFirst","toggleOrder","setState","treeRoot","console","log","maxing","mining","generateTree","Node","length","calculateHeuristicValues","shouldPCplay","mode","slice","current","setTimeout","computerMove","makeMove","calculateWinner","currentMove","Math","floor","currentOnTree","children","find","child","myMove","concat","possibleMoves","forEach","push","comMove","random","step","status","winner","moves","map","_","array","desc","jumpTo","fontWeight","reverse","isActive","handleClick","transform","icon","faCaretDown","lines","a","b","c","parent","maxer","currentNode","nextSymbol","nextMaxer","childSquares","currentDepth","targetDepth","newBranch","oCount","xCount","heuristicTTT","max","min","SetupScreen","GamesGlobal","stage","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b484854b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nclass Square extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                style={{ animation: this.props.animate, color: this.props.color }}\r\n                className={this.props.value ? \"square\" : \"square empty\"}\r\n                onClick={() => { this.props.onClickFun() }}>\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Square","import React from 'react';\r\nimport Square from './Square.js'\r\nimport './index.css';\r\n\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        let winners = []\r\n        if (this.props.winners)\r\n            winners = this.props.winners[1]\r\n        let color = null;\r\n        if (this.props.squares[i] === \"X\")\r\n            color = \"#202020\";\r\n        else\r\n            color = \"whitesmoke\";\r\n\r\n        return <Square\r\n            animate={(winners.includes(i)) ? \"anim 1s linear infinite\" : \"none\"}\r\n            value={this.props.squares[i]}\r\n            color={color}\r\n            onClickFun={() => this.props.onClick(i)\r\n            }\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game-board\">\r\n\r\n                {this.renderSquare(0)}\r\n                {this.renderSquare(1)}\r\n                {this.renderSquare(2)}\r\n                {this.renderSquare(3)}\r\n                {this.renderSquare(4)}\r\n                {this.renderSquare(5)}\r\n                {this.renderSquare(6)}\r\n                {this.renderSquare(7)}\r\n                {this.renderSquare(8)}\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Board","import React from 'react';\r\nimport Board from './Board.js'\r\nimport './index.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Game extends React.Component {\r\n    state = {\r\n        stepNumber: 0, //how deep in the game we are\r\n        history: [{ squares: Array(9).fill(null), move: [], onTree: null }],\r\n        xIsNext: true,\r\n        orderAsc: true,\r\n        //FIRST PLAYER HAS X ALLWAYS\r\n        pcFirst: true,\r\n        //root of game tree\r\n        // root: null,\r\n    };\r\n\r\n    componentDidMount() {\r\n\r\n        //create Game Tree full depth\r\n        if (!treeRoot) {\r\n            console.log(\"MAKING TREE...\")\r\n            const history = this.state.history;\r\n            let maxing;\r\n            let mining;\r\n            if (this.state.pcFirst) {\r\n                maxing = \"X\"\r\n                mining = \"O\"\r\n            }\r\n            else {\r\n                maxing = \"O\"\r\n                mining = \"X\"\r\n            }\r\n\r\n            treeRoot = new Node(history[history.length - 1].squares, null, null, this.state.pcFirst ? true : false);\r\n            generateTree(treeRoot, maxing, mining);\r\n            // console.log(\"leafs = \", count)\r\n            calculateHeuristicValues(treeRoot, maxing, 0, 8);\r\n\r\n            this.setState({\r\n                history: [{ squares: Array(9).fill(null), move: [], onTree: treeRoot }]\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        const shouldPCplay = (this.state.xIsNext && this.state.pcFirst) || (!this.state.xIsNext && !this.state.pcFirst)\r\n        if (this.props.mode == 1 && shouldPCplay) {\r\n            const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n            const current = history[history.length - 1];\r\n            console.log(current)\r\n            //delay pc move for abit\r\n            setTimeout(() => { this.computerMove(current) }, 700)\r\n\r\n        }\r\n    }\r\n\r\n    handleClick(i) {\r\n        //ignore click if its cpu turn\r\n        const shouldPCplay = (this.state.xIsNext && this.state.pcFirst) || (!this.state.xIsNext && !this.state.pcFirst)\r\n        if (this.props.mode == 1 && shouldPCplay) {\r\n            return;\r\n        }\r\n        this.makeMove(i);\r\n    }\r\n\r\n    makeMove(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        const currentMove = [Math.floor(i / 3) + 1, i % 3 + 1]\r\n        const currentOnTree = current.onTree.children.find((child) => child.myMove == i)\r\n\r\n        this.setState({\r\n            history: history.concat([{ squares: squares, move: currentMove, onTree: currentOnTree }]),\r\n            xIsNext: !this.state.xIsNext,\r\n            stepNumber: history.length,\r\n        });\r\n\r\n\r\n        console.log(\"ontree\", currentOnTree)\r\n    }\r\n\r\n    computerMove({ squares, onTree }) {\r\n\r\n        let possibleMoves = []\r\n        console.log(onTree)\r\n        //the possible moves are the children on tree that have the same heuristic value as the current node\r\n        onTree.children.forEach((child) => {\r\n            if (onTree.value == child.value)\r\n                possibleMoves.push(child.myMove)\r\n        })\r\n\r\n        let comMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n        this.makeMove(comMove)\r\n    }\r\n\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    toggleOrder = () => {\r\n        this.setState({\r\n            orderAsc: !this.state.orderAsc\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        let moves = history.map((_, step, array) => {\r\n            const desc = step ? `${step % 2 ? 'X' : 'O'} to ${this.state.history[step].move}` : 'Go to game start';\r\n            return (<li key={step}><button\r\n                onClick={() => this.jumpTo(step)}\r\n                style={{ fontWeight: step === this.state.stepNumber ? \"600\" : \"400\" }}\r\n            >{desc}</button></li>);\r\n        });\r\n        if (!this.state.orderAsc)\r\n            moves = moves.reverse()\r\n\r\n\r\n        let status;\r\n        if (this.state.stepNumber == 9) status = \"DRAW\"\r\n        else\r\n            if (winner) { status = 'Winner: ' + winner[0]; } else { status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'); }\r\n        return (\r\n\r\n            <div className={this.props.isActive ? \"game on-screen\" : \"game\"} >\r\n                <div className=\"game-board-wrapper\">\r\n                    <Board squares={current.squares} onClick={(i) => this.handleClick(i)} winners={winner} />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <p onClick={this.toggleOrder}>Moves <span style={{\r\n                        transform: (this.state.orderAsc ? \"\" : \"rotate(180deg)\")\r\n                    }}><FontAwesomeIcon icon={faCaretDown} /></span></p>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Game\r\n\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n\r\n            return [squares[a], [a, b, c]];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n//maxing for O by default\r\n//this can be simpler with only checking win loss and draw\r\nfunction heuristicTTT(newBranch, maxing) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    let value = 0;\r\n    for (let i = 0; i < 8; i++) {\r\n        const [a, b, c] = lines[i]\r\n        let oCount = 0;\r\n        let xCount = 0;\r\n        if (newBranch[a] == \"O\") oCount++\r\n        if (newBranch[b] == \"O\") oCount++\r\n        if (newBranch[c] == \"O\") oCount++\r\n        if (newBranch[a] == \"X\") xCount++\r\n        if (newBranch[b] == \"X\") xCount++\r\n        if (newBranch[c] == \"X\") xCount++\r\n\r\n\r\n\r\n        if (oCount == 3)\r\n            value += 100\r\n        else if (xCount == 3)\r\n            value = -100\r\n\r\n        else if (xCount == 0) {\r\n            if (oCount == 1)\r\n                value += 1\r\n            else if (oCount == 2)\r\n                value += 3\r\n        }\r\n        else if (oCount == 0) {\r\n            if (xCount == 1)\r\n                value -= 1\r\n            else if (xCount == 2)\r\n                value -= 3\r\n        }\r\n\r\n\r\n    }\r\n    //draw is bad but better than loss\r\n\r\n    if (maxing == \"O\")\r\n        return value;\r\n    else\r\n        return -value;\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass Node {\r\n    constructor(squares, parent, move, maxer) {\r\n        this.squares = squares;\r\n        this.myMove = move\r\n        this.parent = parent;\r\n        this.children = [];\r\n        this.value = null;\r\n        this.maxer = maxer; //true false\r\n    }\r\n}\r\n\r\n// let leafs = []\r\nlet treeRoot = null;\r\n// let count = 0;\r\nfunction generateTree(currentNode, maxing, mining) {\r\n\r\n    //check if its winning config\r\n    if (calculateWinner(currentNode.squares)) {\r\n        // leafs.push(currentNode)\r\n        // count++;\r\n        return;\r\n    }\r\n    //if current node is MAX children are MIN\r\n    let nextMaxer = !currentNode.maxer\r\n    let nextSymbol;\r\n    //when current is node is max its cpu turn so the children are their cpus move with maxing\r\n    if (currentNode.maxer)\r\n        nextSymbol = maxing;\r\n    else\r\n        nextSymbol = mining;\r\n\r\n    //populate the children\r\n    for (let i = 0; i < 9; i++) {\r\n        if (currentNode.squares[i] == null) {\r\n            let childSquares = [...currentNode.squares]\r\n            childSquares[i] = nextSymbol;\r\n            let child = new Node(childSquares, currentNode, i, nextMaxer)\r\n            currentNode.children.push(child)\r\n        }\r\n    }\r\n\r\n    //counting leaf nodes\r\n    if (currentNode.children.length == 0) {\r\n        // leafs.push(currentNode)\r\n        // count++\r\n        return;\r\n    }\r\n\r\n    currentNode.children.forEach((child) => {\r\n        generateTree(child, maxing, mining)\r\n    })\r\n\r\n\r\n}\r\n\r\nfunction calculateHeuristicValues(currentNode, maxing, currentDepth, targetDepth) {\r\n\r\n    if (currentNode.children.length == 0) {\r\n        currentNode.value = heuristicTTT(currentNode.squares, maxing);\r\n        // if (currentNode.value < 0) {\r\n        //     console.log(currentNode.value)\r\n        // }\r\n    }\r\n    else if (currentNode.maxer) {\r\n        currentNode.value = Math.max(...currentNode.children.map((child) => {\r\n            return calculateHeuristicValues(child, maxing);\r\n        }))\r\n\r\n    }\r\n    else if (!currentNode.maxer)\r\n        currentNode.value = Math.min(...currentNode.children.map((child) => {\r\n            return calculateHeuristicValues(child, maxing);\r\n        }))\r\n\r\n    return currentNode.value;\r\n}","import React from 'react';\r\nimport './index.css';\r\n\r\nimport './index.css';\r\nclass SetupScreen extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={this.props.isActive ? \"button-container on-screen\" : \"button-container\"}>\r\n                <button onClick={() => this.props.handleClick(1)}>VS COM</button>\r\n                <button onClick={() => this.props.handleClick(2)}>2 PLAYERS</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SetupScreen","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './Game.js'\r\nimport SetupScreen from './SetupScreen.js'\r\nimport './index.css';\r\n\r\n\r\n\r\nclass GamesGlobal extends React.Component {\r\n\r\n    state = {\r\n        stage: \"setup\", // setup/game\r\n        mode: null,     // 1 or 2 players\r\n    }\r\n\r\n    handleClick = (mode) => {\r\n\r\n        if (mode == 1)\r\n            this.setState({\r\n                mode: 1,\r\n                stage: \"game\"\r\n            })\r\n        else if (mode == 2)\r\n            this.setState({\r\n                mode: 2,\r\n                stage: \"game\"\r\n            })\r\n        else\r\n            alert(\"something went wrong - mode has unexpected value\")\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game-container\">\r\n                <SetupScreen\r\n                    isActive={this.state.stage === \"setup\" ? true : false}\r\n                    handleClick={this.handleClick}\r\n                />\r\n                <Game\r\n                    isActive={this.state.stage === \"game\" ? true : false}\r\n                    mode={this.state.mode} />\r\n                {/* <Game /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <GamesGlobal />,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}